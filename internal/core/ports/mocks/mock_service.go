// Code generated by MockGen. DO NOT EDIT.
// Source: service_ports.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	os "os"
	reflect "reflect"
	sync "sync"

	models "github.com/Kaborda-Irina/Kubernetes-Hasher/internal/core/models"
	api "github.com/Kaborda-Irina/Kubernetes-Hasher/pkg/api"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockIAppService is a mock of IAppService interface.
type MockIAppService struct {
	ctrl     *gomock.Controller
	recorder *MockIAppServiceMockRecorder
}

// MockIAppServiceMockRecorder is the mock recorder for MockIAppService.
type MockIAppServiceMockRecorder struct {
	mock *MockIAppService
}

// NewMockIAppService creates a new mock instance.
func NewMockIAppService(ctrl *gomock.Controller) *MockIAppService {
	mock := &MockIAppService{ctrl: ctrl}
	mock.recorder = &MockIAppServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAppService) EXPECT() *MockIAppServiceMockRecorder {
	return m.recorder
}

// StartCheckHashData mocks base method.
func (m *MockIAppService) Check(ctx context.Context, flagName string, jobs chan string, results chan api.HashData, sig chan os.Signal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, flagName, jobs, results, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCheckHashData indicates an expected call of StartCheckHashData.
func (mr *MockIAppServiceMockRecorder) StartCheckHashData(ctx, flagName, jobs, results, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIAppService)(nil).Check), ctx, flagName, jobs, results, sig)
}

// StartGetHashData mocks base method.
func (m *MockIAppService) Start(ctx context.Context, flagName string, jobs chan string, results chan api.HashData, sig chan os.Signal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, flagName, jobs, results, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartGetHashData indicates an expected call of StartGetHashData.
func (mr *MockIAppServiceMockRecorder) StartGetHashData(ctx, flagName, jobs, results, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIAppService)(nil).Start), ctx, flagName, jobs, results, sig)
}

// MockIHashService is a mock of IHashService interface.
type MockIHashService struct {
	ctrl     *gomock.Controller
	recorder *MockIHashServiceMockRecorder
}

// MockIHashServiceMockRecorder is the mock recorder for MockIHashService.
type MockIHashServiceMockRecorder struct {
	mock *MockIHashService
}

// NewMockIHashService creates a new mock instance.
func NewMockIHashService(ctrl *gomock.Controller) *MockIHashService {
	mock := &MockIHashService{ctrl: ctrl}
	mock.recorder = &MockIHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashService) EXPECT() *MockIHashServiceMockRecorder {
	return m.recorder
}

// ChangedHashes mocks base method.
func (m *MockIHashService) ChangedHashes(currentHashData []api.HashData, hashSumFromDB []models.HashDataFromDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangedHashes", currentHashData, hashSumFromDB)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangedHashes indicates an expected call of ChangedHashes.
func (mr *MockIHashServiceMockRecorder) ChangedHashes(currentHashData, hashSumFromDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangedHashes", reflect.TypeOf((*MockIHashService)(nil).ChangedHashes), currentHashData, hashSumFromDB)
}

// CreateHash mocks base method.
func (m *MockIHashService) CreateHash(path string) api.HashData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHash", path)
	ret0, _ := ret[0].(api.HashData)
	return ret0
}

// CreateHash indicates an expected call of CreateHash.
func (mr *MockIHashServiceMockRecorder) CreateHash(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHash", reflect.TypeOf((*MockIHashService)(nil).CreateHash), path)
}

// GetHashSum mocks base method.
func (m *MockIHashService) GetHashSum(ctx context.Context, dirFiles string) ([]models.HashDataFromDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashSum", ctx, dirFiles)
	ret0, _ := ret[0].([]models.HashDataFromDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashSum indicates an expected call of GetHashSum.
func (mr *MockIHashServiceMockRecorder) GetHashSum(ctx, dirFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashSum", reflect.TypeOf((*MockIHashService)(nil).GetHashSum), ctx, dirFiles)
}

// SaveHashData mocks base method.
func (m *MockIHashService) SaveHashData(ctx context.Context, allHashData []api.HashData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHashData", ctx, allHashData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHashData indicates an expected call of SaveHashData.
func (mr *MockIHashServiceMockRecorder) SaveHashData(ctx, allHashData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHashData", reflect.TypeOf((*MockIHashService)(nil).SaveHashData), ctx, allHashData)
}

// Worker mocks base method.
func (m *MockIHashService) Worker(ctx context.Context, wg *sync.WaitGroup, jobs <-chan string, results chan<- api.HashData, logger *logrus.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Worker", ctx, wg, jobs, results, logger)
}

// Worker indicates an expected call of Worker.
func (mr *MockIHashServiceMockRecorder) Worker(ctx, wg, jobs, results, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Worker", reflect.TypeOf((*MockIHashService)(nil).Worker), ctx, wg, jobs, results, logger)
}

// WorkerPool mocks base method.
func (m *MockIHashService) WorkerPool(ctx context.Context, countWorkers int, jobs chan string, results chan api.HashData, logger *logrus.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WorkerPool", ctx, countWorkers, jobs, results, logger)
}

// WorkerPool indicates an expected call of WorkerPool.
func (mr *MockIHashServiceMockRecorder) WorkerPool(ctx, countWorkers, jobs, results, logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerPool", reflect.TypeOf((*MockIHashService)(nil).WorkerPool), ctx, countWorkers, jobs, results, logger)
}
